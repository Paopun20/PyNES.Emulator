name: Build PyNES Emulator
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.13.7']

    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Get pip cache dir
      id: pip-cache
      shell: bash
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install OS dependencies
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update && sudo apt-get install -y libgl1 libglib2.0-0 libxrender1 libgomp1
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew update
          brew install libomp
        fi

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install UPX
      id: upx
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update && sudo apt-get install -y upx
          echo "upx_path=$(command -v upx)" >> $GITHUB_OUTPUT

        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install upx
          echo "upx_path=$(command -v upx)" >> $GITHUB_OUTPUT

        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          winget install --id=UPX.UPX -e --accept-source-agreements --accept-package-agreements || true
          userprofile_win="$USERPROFILE"
          userprofile=$(cygpath "$userprofile_win" 2>/dev/null || echo "$userprofile_win")
          upx_link_path="$userprofile/AppData/Local/Microsoft/WinGet/Links"
          upx_exe="$upx_link_path/upx.exe"
          if [[ -f "$upx_exe" ]]; then
            echo "UPX found at $upx_exe"
            echo "upx_path=$upx_exe" >> $GITHUB_OUTPUT
          else
            echo "upx_path=" >> $GITHUB_OUTPUT
          fi
        else
          echo "Unsupported OS: ${{ matrix.os }}"
          exit 1
        fi
    
    - name: Install Python dependencies
      shell: bash
      run: |
        pip install --upgrade pip
        pip install --upgrade -r requirements.txt
        pip install git+https://github.com/pyinstaller/pyinstaller.git

    - id: build
      name: Build PyNES
      continue-on-error: ${{ matrix.os == 'windows-latest' }}
      shell: bash
      run: |
        mkdir -p dist
        BUILD_EXIT=0

        if [[ -n "${{ steps.upx.outputs.upx_path }}" ]]; then
          upx_dir="$(dirname "${{ steps.upx.outputs.upx_path }}")"
          echo "Using UPX from: $upx_dir"
          pyinstaller pynes.spec --clean --noconfirm --upx-dir "$upx_dir" || BUILD_EXIT=$?
        else
          echo "UPX not found, building without compression"
          pyinstaller pynes.spec --clean --noconfirm || BUILD_EXIT=$?
        fi

        if [[ "$BUILD_EXIT" -eq 0 ]]; then
          echo "build_success=true" >> $GITHUB_OUTPUT
        else
          echo "build_success=false" >> $GITHUB_OUTPUT
          echo "PyInstaller exited with code $BUILD_EXIT"
        fi
        exit $BUILD_EXIT

    - uses: actions/upload-artifact@v4
      if: steps.build.outputs.build_success == 'true'
      with:
        name: pynes-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/*
          icon.ico
        retention-days: 90
