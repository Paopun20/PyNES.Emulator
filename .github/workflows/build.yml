name: Build PyNES Emulator

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest] # ubuntu-latest, macos-latest # Temporarily disabled on linux and macOS due to build issues
        python-version: ['3.13.7']

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Get pip cache dir
      id: pip-cache
      shell: bash
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install OS dependencies
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update
          sudo apt-get install -y libgl1 libglib2.0-0 libxrender1 libgomp1
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install libomp
        fi

    - name: Install UPX
      id: upx
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get install -y upx
          echo "upx_path=$(command -v upx)" >> $GITHUB_OUTPUT

        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install upx
          echo "upx_path=$(command -v upx)" >> $GITHUB_OUTPUT

        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Try winget first, fallback to direct download
          if ! winget install --id=UPX.UPX -e --accept-source-agreements --accept-package-agreements --silent; then
            echo "Winget install failed, attempting direct download..."
            curl -L -o upx.zip https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-win64.zip
            unzip -q upx.zip
            upx_dir="$(pwd)/upx-4.2.1-win64"
            echo "upx_path=$upx_dir/upx.exe" >> $GITHUB_OUTPUT
          else
            userprofile_win="$USERPROFILE"
            userprofile=$(cygpath "$userprofile_win" 2>/dev/null || echo "$userprofile_win")
            upx_link_path="$userprofile/AppData/Local/Microsoft/WinGet/Links"
            upx_exe="$upx_link_path/upx.exe"
            if [[ -f "$upx_exe" ]]; then
              echo "UPX found at $upx_exe"
              echo "upx_path=$upx_exe" >> $GITHUB_OUTPUT
            else
              echo "upx_path=" >> $GITHUB_OUTPUT
            fi
          fi
        fi

    - name: make env
      shell: bash
      run: |
        python -m venv env
        source env/bin/activate
    
    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade -r requirements.txt
        pip install git+https://github.com/pyinstaller/pyinstaller.git

    - id: build_extensions
      name: Build Extensions
      shell: bash
      run: python setup.py build_ext --inplace

    - name: Build Rust Extensions
      shell: bash
      run: |
        cd pynes/rust
        # Install maturin if not already available
        pip install maturin
        
        # Build all Rust extensions
        for dir in */ ; do
          if [[ -f "${dir}Cargo.toml" ]]; then
            echo "Building ${dir}..."
            cd "$dir"
            maturin develop --release
            cd ..
          fi
        done

    - name: Build PyNES
      id: build
      shell: bash
      run: |
        mkdir -p dist
        
        if [[ -n "${{ steps.upx.outputs.upx_path }}" ]]; then
          upx_dir="$(dirname "${{ steps.upx.outputs.upx_path }}")"
          echo "Using UPX from: $upx_dir"
          pyinstaller pynes.spec --clean --noconfirm --upx-dir "$upx_dir"
        else
          echo "UPX not found, building without compression"
          pyinstaller pynes.spec --clean --noconfirm
        fi
        
        echo "build_success=true" >> $GITHUB_OUTPUT

    - name: Verify Build Output
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          test -f dist/pynes.exe || exit 1
        else
          test -f dist/pynes || exit 1
        fi

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      if: steps.build.outputs.build_success == 'true'
      with:
        name: pynes-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/pynes${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          icon.ico
        retention-days: 90
        compression-level: 6