name: Build PyNES Emulator
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.13']
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v5
    
    - uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Get pip cache dir
      id: pip-cache
      shell: bash
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install OS dependencies
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update && sudo apt-get install -y libgl1 libglib2.0-0 libxrender1 libgomp1
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install libomp
        fi
    
    - name: Install UPX
      continue-on-error: true
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update && sudo apt-get install -y upx
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install upx
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          winget install --id=UPX.UPX -e --accept-source-agreements --accept-package-agreements
          userprofile=$(cygpath "$USERPROFILE")
          upx_link_path="$userprofile/AppData/Local/Microsoft/WinGet/Links"
          upx_exe="$upx_link_path/upx.exe"
          if [[ -f "$upx_exe" ]]; then
            echo "$upx_exe" > "$userprofile/.upx_path"
          else
            echo "UPX executable not found after install"
          fi
        else
          echo "Unsupported OS: ${{ matrix.os }}"
          exit 1
        fi
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install git+https://github.com/pyinstaller/pyinstaller.git
    
    - name: Build PyNES
      id: build
      continue-on-error: true
      shell: bash
      run: |
        mkdir -p dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          userprofile=$(cygpath "$USERPROFILE")
          upx_path_file="$userprofile/.upx_path"
          if [[ -f "$upx_path_file" ]]; then
            upx_dir="$(dirname "$(cat "$upx_path_file")")"
            echo "Using UPX from: $upx_dir"
            pyinstaller pynes.spec --clean --noconfirm --upx-dir "$upx_dir"
          else
            echo "UPX not found, building without compression"
            pyinstaller pynes.spec --clean --noconfirm
          fi
        else
          if command -v upx >/dev/null 2>&1; then
            upx_dir="$(dirname "$(command -v upx)")"
            echo "Using UPX from: $upx_dir"
            pyinstaller pynes.spec --clean --noconfirm --upx-dir "$upx_dir"
          else
            echo "UPX not found, building without compression"
            pyinstaller pynes.spec --clean --noconfirm
          fi
        fi
        
        # Check if build succeeded
        if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
          echo "build_success=true" >> $GITHUB_OUTPUT
        else
          echo "build_success=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload build artifacts
      if: always() && steps.build.outputs.build_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: pynes-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          dist/*
          icon.ico
        retention-days: 30
    
    - name: Upload build logs on failure
      if: always() && steps.build.outputs.build_success != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          build/
          *.log
        retention-days: 7
    
    - name: Report build status
      if: always()
      run: |
        if [[ "${{ steps.build.outputs.build_success }}" == "true" ]]; then
          echo "✅ Build succeeded for ${{ matrix.os }}"
        else
          echo "❌ Build failed for ${{ matrix.os }}"
          exit 1
        fi
