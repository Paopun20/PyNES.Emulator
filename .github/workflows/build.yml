name: Build PyNES Emulator

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        bit: [32, 64]
        python-version: ["3.13.7"]
        exclude:
          - os: macos-latest
            bit: 32

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.bit == 32 && 'x86' || 'x64' }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.bit == 32 && 'i686-unknown-linux-gnu' || '' }}${{ matrix.os == 'windows-latest' && matrix.bit == 32 && 'i686-pc-windows-msvc' || '' }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            app/target/
          key: ${{ runner.os }}-${{ matrix.bit }}bit-cargo-${{ hashFiles('app/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.bit }}bit-cargo-

      - name: Get pip cache dir
        id: pip-cache-dir
        working-directory: app
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip packages
        id: pip-cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.bit }}bit-pip-${{ matrix.python-version }}-${{ hashFiles('app/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.bit }}bit-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-${{ matrix.bit }}bit-pip-

      - name: Install OS dependencies
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            if [[ "${{ matrix.bit }}" == "32" ]]; then
              sudo dpkg --add-architecture i386
              sudo apt-get update
              sudo apt-get install -y gcc-multilib g++-multilib libgl1:i386 libglib2.0-0:i386 libxrender1:i386 libgomp1:i386
            else
              sudo apt-get install -y libgl1 libglib2.0-0 libxrender1 libgomp1
            fi
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install libomp
          fi

      - name: Install UPX
        id: upx
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get install -y upx
            echo "upx_path=$(command -v upx)" >> $GITHUB_OUTPUT

          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install upx
            echo "upx_path=$(command -v upx)" >> $GITHUB_OUTPUT

          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            if ! winget install --id=UPX.UPX -e --accept-source-agreements --accept-package-agreements --silent; then
              echo "Winget install failed, attempting direct download..."
              if [[ "${{ matrix.bit }}" == "32" ]]; then
                curl -L -o upx.zip https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-win32.zip
                unzip -q upx.zip
                upx_dir="$(pwd)/upx-5.0.2-win32"
              else
                curl -L -o upx.zip https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-win64.zip
                unzip -q upx.zip
                upx_dir="$(pwd)/upx-5.0.2-win64"
              fi
              echo "upx_path=$upx_dir/upx.exe" >> $GITHUB_OUTPUT
            else
              userprofile_win="$USERPROFILE"
              userprofile=$(cygpath "$userprofile_win" 2>/dev/null || echo "$userprofile_win")
              upx_link_path="$userprofile/AppData/Local/Microsoft/WinGet/Links"
              upx_exe="$upx_link_path/upx.exe"
              if [[ -f "$upx_exe" ]]; then
                echo "UPX found at $upx_exe"
                echo "upx_path=$upx_exe" >> $GITHUB_OUTPUT
              else
                echo "upx_path=" >> $GITHUB_OUTPUT
              fi
            fi
          fi

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements.txt
          pip install --upgrade git+https://github.com/pyinstaller/pyinstaller.git

      - name: Build Extensions
        id: build_extensions
        run: python setup.py build_ext --inplace

      - name: Build PyNES
        id: build
        # working-directory: app
        run: |
          if [[ -n "${{ steps.upx.outputs.upx_path }}" ]]; then
            upx_dir="$(dirname "${{ steps.upx.outputs.upx_path }}")"
            echo "Using UPX from: $upx_dir"
            pyinstaller pynes.spec --clean --noconfirm --upx-dir "$upx_dir"
          else
            echo "UPX not found, building without compression"
            pyinstaller pynes.spec --clean --noconfirm
          fi
          echo "build_success=true" >> $GITHUB_OUTPUT

      - name: Verify Build Output
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            test -f dist/pynes.exe || exit 1
          else
            test -f dist/pynes || exit 1
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: steps.build.outputs.build_success == 'true'
        with:
          name: pynes-${{ matrix.os }}-${{ matrix.bit }}bit-py${{ matrix.python-version }}
          path: |
            dist/pynes${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            app/icon.ico
          retention-days: 90