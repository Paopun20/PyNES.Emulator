name: "Malware Detection"

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  release:
    types: [ published ]
  workflow_dispatch: {}

jobs:
  detect:
    runs-on: windows-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning

      - name: Get changed files (PR only)
        if: github.event_name == 'pull_request'
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          separator: "|"

      - name: Cache ClamAV Database
        uses: actions/cache@v4
        with:
          path: C:\ProgramData\clamav
          key: clamav-db-${{ runner.os }}-${{ hashFiles('**/workflow.yml') }}-${{ github.run_id }}
          restore-keys: |
            clamav-db-${{ runner.os }}-${{ hashFiles('**/workflow.yml') }}-
            clamav-db-${{ runner.os }}-

      - name: Install ClamAV
        run: |
          Write-Host "Installing ClamAV..."
          choco install clamav -y --no-progress
          refreshenv
          $env:Path = "C:\Program Files\ClamAV;" + $env:Path
          Write-Host "ClamAV installed at:"
          where.exe freshclam
          where.exe clamscan
        shell: powershell

      - name: Update virus definitions
        run: |
          $maxRetries = 3
          $retryCount = 0
          $success = $false
          
          Write-Host "Updating ClamAV virus definitions..."
          
          while (-not $success -and $retryCount -lt $maxRetries) {
            try {
              $retryCount++
              Write-Host "Attempt $retryCount of $maxRetries..."
              freshclam --verbose
              $success = $true
              Write-Host "‚úÖ Virus definitions updated successfully"
            }
            catch {
              Write-Warning "Attempt $retryCount failed: $_"
              if ($retryCount -lt $maxRetries) {
                Write-Host "Retrying in 10 seconds..."
                Start-Sleep -Seconds 10
              }
            }
          }
          
          if (-not $success) {
            Write-Warning "‚ö†Ô∏è Failed to update definitions after $maxRetries attempts. Proceeding with existing definitions."
          }
        shell: powershell
        continue-on-error: true

      - name: Scan repository (Full Scan)
        if: github.event_name != 'pull_request'
        id: full-scan
        run: |
          $logFile = "clamscan-results.txt"
          Write-Host "üîç Starting full repository malware scan..."
          Write-Host "=============================================="
          
          $scanArgs = @(
            "-r",
            "--bell",
            "-i",
            "--exclude-dir=`"\.git`"",
            "--exclude-dir=`"\.github`"",
            "--exclude-dir=`"node_modules`"",
            "--exclude-dir=`"dist`"",
            "--exclude-dir=`"build`"",
            "--exclude-dir=`"target`"",
            "--exclude-dir=`"\.venv`"",
            "--exclude-dir=`"venv`"",
            "--exclude-dir=`"__pycache__`"",
            "--exclude-dir=`"\.pytest_cache`"",
            "--max-filesize=50M",
            "--max-scansize=100M",
            "."
          )
          
          clamscan @scanArgs 2>&1 | Tee-Object -FilePath $logFile
          $exitCode = $LASTEXITCODE
          
          Write-Host "=============================================="
          Write-Host "Scan completed with exit code: $exitCode"
          
          if ($exitCode -eq 1) {
            Write-Error "‚ö†Ô∏è MALWARE DETECTED! Check the scan results above."
            echo "malware_detected=true" >> $env:GITHUB_ENV
            echo "scan_status=failed" >> $env:GITHUB_ENV
            exit 1
          }
          elseif ($exitCode -eq 0) {
            Write-Host "‚úÖ No threats detected"
            echo "malware_detected=false" >> $env:GITHUB_ENV
            echo "scan_status=success" >> $env:GITHUB_ENV
          }
          else {
            Write-Warning "‚öôÔ∏è Scan completed with warnings (exit code: $exitCode)"
            echo "malware_detected=unknown" >> $env:GITHUB_ENV
            echo "scan_status=warning" >> $env:GITHUB_ENV
          }
        shell: powershell

      - name: Scan changed files (PR only)
        if: github.event_name == 'pull_request'
        id: pr-scan
        run: |
          $logFile = "clamscan-results.txt"
          $changedFiles = "${{ steps.changed-files.outputs.all_changed_files }}"
          
          if ([string]::IsNullOrWhiteSpace($changedFiles)) {
            Write-Host "‚ÑπÔ∏è No files changed in this PR"
            echo "malware_detected=false" >> $env:GITHUB_ENV
            echo "scan_status=success" >> $env:GITHUB_ENV
            echo "files_scanned=0" >> $env:GITHUB_ENV
            exit 0
          }
          
          $fileList = $changedFiles -split '\|'
          $filesToScan = @()
          
          foreach ($file in $fileList) {
            if (Test-Path $file -PathType Leaf) {
              $filesToScan += $file
            }
          }
          
          if ($filesToScan.Count -eq 0) {
            Write-Host "‚ÑπÔ∏è No scannable files in this PR"
            echo "malware_detected=false" >> $env:GITHUB_ENV
            echo "scan_status=success" >> $env:GITHUB_ENV
            echo "files_scanned=0" >> $env:GITHUB_ENV
            exit 0
          }
          
          Write-Host "üîç Scanning $($filesToScan.Count) changed files in PR..."
          Write-Host "=============================================="
          
          echo "files_scanned=$($filesToScan.Count)" >> $env:GITHUB_ENV
          
          $scanArgs = @(
            "--bell",
            "-i",
            "--max-filesize=50M",
            "--max-scansize=100M"
          ) + $filesToScan
          
          clamscan @scanArgs 2>&1 | Tee-Object -FilePath $logFile
          $exitCode = $LASTEXITCODE
          
          Write-Host "=============================================="
          Write-Host "Scan completed with exit code: $exitCode"
          
          if ($exitCode -eq 1) {
            Write-Error "‚ö†Ô∏è MALWARE DETECTED! Check the scan results above."
            echo "malware_detected=true" >> $env:GITHUB_ENV
            echo "scan_status=failed" >> $env:GITHUB_ENV
            exit 1
          }
          elseif ($exitCode -eq 0) {
            Write-Host "‚úÖ No threats detected"
            echo "malware_detected=false" >> $env:GITHUB_ENV
            echo "scan_status=success" >> $env:GITHUB_ENV
          }
          else {
            Write-Warning "‚öôÔ∏è Scan completed with warnings (exit code: $exitCode)"
            echo "malware_detected=unknown" >> $env:GITHUB_ENV
            echo "scan_status=warning" >> $env:GITHUB_ENV
          }
        shell: powershell

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: malware-scan-results-${{ github.run_id }}
          path: clamscan-results.txt
          retention-days: 30
          if-no-files-found: ignore

      - name: Comment on PR with scan result
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const malwareDetected = process.env.malware_detected;
            const scanStatus = process.env.scan_status;
            const filesScanned = process.env.files_scanned || 'N/A';
            
            let statusEmoji, statusText, severityLevel;
            
            if (malwareDetected === 'true') {
              statusEmoji = 'üö®';
              statusText = '**MALWARE DETECTED!**';
              severityLevel = 'critical';
            } else if (malwareDetected === 'false') {
              statusEmoji = '‚úÖ';
              statusText = '**No threats detected**';
              severityLevel = 'success';
            } else {
              statusEmoji = '‚öôÔ∏è';
              statusText = '**Scan completed with warnings**';
              severityLevel = 'warning';
            }
            
            const body = `### ${statusEmoji} Malware Scan Results
            
            ${statusText}
            
            **Scan Type:** Changed files only (PR scan)
            **Files Scanned:** ${filesScanned}
            **Status:** \`${scanStatus}\`
            **Workflow Run:** [View Details](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            **Commit:** \`${context.sha.substring(0, 7)}\`
            
            ${malwareDetected === 'true' ? '‚ö†Ô∏è **Action Required:** This PR contains potentially malicious files. Review the scan results immediately and do not merge until the issue is resolved.\n\n' : ''}${malwareDetected === 'false' ? '‚ú® This PR is safe to review and merge from a malware perspective.\n\n' : ''}üìé Download detailed scan logs from the [workflow artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).
            
            ---
            *Scanned with ClamAV*`;
            
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Fail workflow if malware detected
        if: env.malware_detected == 'true'
        run: |
          Write-Error "‚ùå Workflow failed due to malware detection"
          Write-Error "Review the scan results and remove malicious files before proceeding"
          exit 1
        shell: powershell

      - name: Generate scan summary
        if: always()
        run: |
          Write-Host "üìä Scan Summary"
          Write-Host "=============================================="
          Write-Host "Malware Detected: $env:malware_detected"
          Write-Host "Scan Status: $env:scan_status"
          Write-Host "Event Type: ${{ github.event_name }}"
          
          if (Test-Path "clamscan-results.txt") {
            Write-Host "`nScan Results Preview:"
            Get-Content "clamscan-results.txt" -Tail 20
          }
        shell: powershell
