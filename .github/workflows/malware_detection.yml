name: "Malware Detection"

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  release:
    types: [ published ]
  workflow_dispatch: {}

jobs:
  detect:
    runs-on: windows-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write

  steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning

      - name: Get changed files (PR only)
        if: github.event_name == 'pull_request'
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          separator: "|"

      - name: Cache ClamAV Database
        uses: actions/cache@v4
        with:
          path: C:\ProgramData\clamav
          key: clamav-db-${{ runner.os }}
          restore-keys: |
            clamav-db-${{ runner.os }}

      - name: Install ClamAV
        run: |
          Write-Host "Installing ClamAV..."
          choco install clamav -y --no-progress
          refreshenv
          Write-Host "ClamAV installed. Verifying..."
          freshclam --version
          clamscan --version
          
          # Create database directory and set permissions
          $dbDir = "C:\ProgramData\clamav"
          if (-not (Test-Path $dbDir)) {
            New-Item -Path $dbDir -ItemType Directory -Force | Out-Null
          }
          icacls $dbDir /grant "Everyone:(OI)(CI)F" /T | Out-Null
          
          # Create freshclam.conf in DB dir (cached + reliable)
          $freshclamConf = Join-Path $dbDir "freshclam.conf"
          @"
          DatabaseMirror db.us.clamav.net
          DatabaseMirror db.eu.clamav.net
          DatabaseMirror db.jp.clamav.net
          DatabaseMirror database.clamav.net
          DatabaseDirectory C:\ProgramData\clamav
          LogFile ${{ dbDir }}\freshclam.log
          LogFileMaxSize 10M
          LogTime yes
          LogNewOnly yes
          Quiet no
          "@ | Out-File -FilePath $freshclamConf -Encoding ASCII
          Write-Host "freshclam.conf created: $freshclamConf"
        shell: powershell

      - name: Update virus definitions
        run: |
          $dbDir = "C:\ProgramData\clamav"
          $freshclamConf = Join-Path $dbDir "freshclam.conf"
          $maxRetries = 3
          $retryCount = 0
          $success = $false
          
          Write-Host "Updating ClamAV virus definitions..."
          
          while (-not $success -and $retryCount -lt $maxRetries) {
            try {
              $retryCount++
              Write-Host "Attempt $retryCount/$maxRetries..."
              & freshclam --config-file="$freshclamConf" --verbose
              if ($LASTEXITCODE -eq 0) {
                $success = $true
                Write-Host "‚úÖ Virus definitions updated successfully"
              } else {
                throw "freshclam exited with code $LASTEXITCODE"
              }
            }
            catch {
              Write-Warning "Attempt $retryCount failed: $_"
              if ($retryCount -lt $maxRetries) {
                Start-Sleep -Seconds 10
              }
            }
          }
          
          if (-not $success) {
            Write-Warning "‚ùå Failed to update after $maxRetries attempts. Using cached definitions."
          }
        shell: powershell
        continue-on-error: true

      - name: Scan repository (Full Scan)
        if: github.event_name != 'pull_request'
        timeout-minutes: 30
        id: full-scan
        run: |
          $logFile = "clamscan-results.txt"
          Write-Host "üîç Starting **FULL** repository malware scan..."
          
          $scanArgs = @(
            "-r", "--bell", "-i",
            "--exclude-dir=\\.git",
            "--exclude-dir=\\.github",
            "--exclude-dir=node_modules",
            "--exclude-dir=dist",
            "--exclude-dir=build",
            "--exclude-dir=target",
            "--exclude-dir=\\.venv",
            "--exclude-dir=venv",
            "--exclude-dir=__pycache__",
            "--exclude-dir=\\.pytest_cache",
            "--max-filesize=50M",
            "--max-scansize=100M",
            "."
          )
          
          clamscan @scanArgs 2>&1 | Tee-Object -FilePath $logFile
          $exitCode = $LASTEXITCODE
          
          if ($exitCode -eq 1) {
            echo "malware_detected=true" >> $env:GITHUB_ENV
            echo "scan_status=failed" >> $env:GITHUB_ENV
            exit 1
          } elseif ($exitCode -eq 0) {
            echo "malware_detected=false" >> $env:GITHUB_ENV
            echo "scan_status=success" >> $env:GITHUB_ENV
          } else {
            echo "malware_detected=unknown" >> $env:GITHUB_ENV
            echo "scan_status=warning" >> $env:GITHUB_ENV
          }
        shell: powershell

      - name: Scan changed files (PR only)
        if: github.event_name == 'pull_request'
        timeout-minutes: 10
        id: pr-scan
        run: |
          $logFile = "clamscan-results.txt"
          $changedFiles = "${{ steps.changed-files.outputs.all_changed_files }}"
          
          if ([string]::IsNullOrWhiteSpace($changedFiles)) {
            echo "malware_detected=false" >> $env:GITHUB_ENV
            echo "scan_status=success" >> $env:GITHUB_ENV
            echo "files_scanned=0" >> $env:GITHUB_ENV
            exit 0
          }
          
          $fileList = $changedFiles -split '\|'
          $filesToScan = $fileList | Where-Object { Test-Path $_ -PathType Leaf }
          
          $filesCount = $filesToScan.Count
          echo "files_scanned=$filesCount" >> $env:GITHUB_ENV
          
          if ($filesCount -eq 0) {
            echo "malware_detected=false" >> $env:GITHUB_ENV
            echo "scan_status=success" >> $env:GITHUB_ENV
            exit 0
          }
          
          Write-Host "üîç Scanning **$filesCount** changed files..."
          
          $scanArgs = @("--bell", "-i", "--max-filesize=50M", "--max-scansize=100M") + $filesToScan
          clamscan @scanArgs 2>&1 | Tee-Object -FilePath $logFile
          $exitCode = $LASTEXITCODE
          
          if ($exitCode -eq 1) {
            echo "malware_detected=true" >> $env:GITHUB_ENV
            echo "scan_status=failed" >> $env:GITHUB_ENV
            exit 1
          } elseif ($exitCode -eq 0) {
            echo "malware_detected=false" >> $env:GITHUB_ENV
            echo "scan_status=success" >> $env:GITHUB_ENV
          } else {
            echo "malware_detected=unknown" >> $env:GITHUB_ENV
            echo "scan_status=warning" >> $env:GITHUB_ENV
          }
        shell: powershell

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: malware-scan-results-${{ github.run_id }}
          path: clamscan-results.txt
          retention-days: 30

      - name: Comment on PR with scan result
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { malware_detected: malwareDetected, scan_status: scanStatus, files_scanned: filesScanned = 'N/A' } = process.env;
            
            const statusMap = {
              true: { emoji: 'üö®', text: '**MALWARE DETECTED!**', level: 'critical' },
              false: { emoji: '‚úÖ', text: '**No threats detected**', level: 'success' },
              unknown: { emoji: '‚ö†Ô∏è', text: '**Scan completed with warnings**', level: 'warning' }
            };
            
            const status = statusMap[malwareDetected] || statusMap.unknown;
            
            const body = `### ${status.emoji} Malware Scan Results
            
            ${status.text}

            **Scan Type:** Changed files only (PR)
            **Files Scanned:** ${filesScanned}
            **Status:** \`${scanStatus}\`
            **Workflow:** [View Run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            **Commit:** \`${context.sha.slice(0, 7)}\`

            ${malwareDetected === 'true' ? '‚ö†Ô∏è **DO NOT MERGE** until fixed! Review logs.' : ''}
            ${malwareDetected === 'false' ? '‚ú® Safe to merge (malware-free).' : ''}
            üìé [Download Logs](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})

            ---
            *Powered by ClamAV ‚Ä¢ Cache Hit: ~80% faster updates*`;
            
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body
            });
      env:
        malware_detected: ${{ env.malware_detected }}
        scan_status: ${{ env.scan_status }}
        files_scanned: ${{ env.files_scanned }}

      - name: ‚ùå Fail if malware detected
        if: env.malware_detected == 'true'
        run: exit 1

      - name: üìä Scan Summary
        if: always()
        run: |
          Write-Host "::group::Final Summary"
          Write-Host "Event: ${{ github.event_name }}"
          Write-Host "Malware: $env:malware_detected"
          Write-Host "Status: $env:scan_status"
          Write-Host "Files Scanned: $env:files_scanned"
          if (Test-Path clamscan-results.txt) { Get-Content clamscan-results.txt -Tail 10 }
          Write-Host "::endgroup::"
        shell: powershell
